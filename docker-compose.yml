services:
  db_master:
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - db_master-data:/var/lib/postgresql/data
      - ./docker/db/master:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - my-network

  db_slave1:
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: trust
      MASTER_HOST: db_master
      REPLICATION_APPLICATION_NAME: db_slave1
    depends_on:
      - db_master
    volumes:
      - db_slave1-data:/var/lib/postgresql/data
      - ./docker/db/slave:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"
    networks:
      - my-network

  db_slave2:
    image: postgres:latest
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_HOST_AUTH_METHOD: trust
      MASTER_HOST: db_master
      REPLICATION_APPLICATION_NAME: db_slave2
    depends_on:
      - db_master
    volumes:
      - db_slave2-data:/var/lib/postgresql/data
      - ./docker/db/slave:/docker-entrypoint-initdb.d
    ports:
      - "5434:5432"
    networks:
      - my-network

  app:
    build:
      context: .
      dockerfile: docker/app/Dockerfile
    env_file:
      - .env
    environment:
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      DB_HOST: db_master
      DB_PORT: 5432
    ports:
      - "8080:8080"
    depends_on:
      - db_master
    networks:
      - my-network

volumes:
  db_master-data:
  db_slave1-data:
  db_slave2-data:

networks:
  my-network:
    driver: bridge
